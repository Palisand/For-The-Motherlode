<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Health
max_health = 20; // * wave_level_multiplier
hhealth = max_health;
total_health = (hhealth / max_health) * 100;

// Movement
move_speed = 5;
acceleration = 0.1;
mass = 10;
random_move_dir = 0;
random_move_time = 0;
retreat_dir_set = false;
personal_space = random_range(200, 300);

// Gun stuff
gun_current = global.items[choose(ITEM.pistol, ITEM.revolver, ITEM.smg)];
shoot_ready = false;
can_shoot = true;

// Sprite stuff
c_skin = get_skin_color();
walk_wave_t = 0;
drawn_footprint = false;
s_feet_image_index = 0;
s_feet_image_yscale = 1;
sprite_index = s_mask_human;

// Particle Emitters and Types
muzzle_flash_p_emitter = part_emitter_create(global.p_sys);
muzzle_flash_p_type = part_type_create();
blood_emitter = instance_create(x, y, o_particle_emitter);

// Other
proj_pushback = 0;
gib_threshold = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cleanup

blood_emitter.alarm[0] = room_speed;
part_emitter_destroy(global.p_sys, muzzle_flash_p_emitter);
part_type_destroy(muzzle_flash_p_type);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// can_shoot = true

can_shoot = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// drawn_footprint = true

drawn_footprint = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set random move vars

random_move_time = random_range(10, 100);
random_move_dir = choose(90, -90);
// (45, -45) deg means slowly getting closer to player
 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shooting

switch (gun_current[GUN.action]) {
    case GUN_ACTION.semi_auto:
        if (shoot_ready &amp;&amp; can_shoot) {
            shoot(gun_current, o_player);
            can_shoot = false;
            alarm[2] = choose(random_range(10, 20), random_range(30, 60));
        }
        break;
    case GUN_ACTION.automatic:
        if (shoot_ready &amp;&amp; can_shoot) {
            shoot(gun_current, o_player);
            can_shoot = false;
            alarm[2] = set_chance(90, gun_current[GUN.shoot_delay], random_range(30, 60));
        }
        break;
    case GUN_ACTION.single_shot:
        if (shoot_ready &amp;&amp; can_shoot) {
            shoot(gun_current, o_player);
            can_shoot = false;
            alarm[2] = random_range(gun_current[GUN.shoot_delay], gun_current[GUN.shoot_delay] + 60);
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement

// Orientation
image_angle = point_direction(x, y, o_player.x, o_player.y);

var dist_to_plr = distance_to_point(o_player.x, o_player.y);
// Move towards player if not within effective weapon range
if (dist_to_plr &gt; gun_current[GUN.range]) {
    shoot_ready = false;
    alarm[0] = -1;
    speed = lerp(speed, move_speed, acceleration);
    move_towards_point(o_player.x, o_player.y, speed);
}
// Move away from player if too close (don't stop shooting though)
else if (dist_to_plr &lt; personal_space) {
    shoot_ready = true;
    alarm[0] = -1;
    if !(retreat_dir_set) {
        direction = random_range(45, -45) + point_direction(x, y, o_player.x, o_player.y) + 180;
        retreat_dir_set = true;
    }
    speed = lerp(speed, move_speed, acceleration);
}
// Stop moving, or move randomly IF NEAR PLAYER
else {
    shoot_ready = true;
    retreat_dir_set = false;
    if (random_move_time &lt;= 0 &amp;&amp; alarm[0] == -1) {
        alarm[0] = random_range(100, 200);
    }
    speed = lerp(speed, 0, acceleration);
}

if (random_move_time &gt; 0) {
    random_move_time--;
    direction = random_move_dir + point_direction(x, y, o_player.x, o_player.y);
    speed = lerp(speed, move_speed, acceleration);
}

// Strafe quickly if shot


// Feet
handle_human_leg_anim(speed);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Health &amp; Death

total_health = (hhealth / max_health) * 100;

if (total_health &lt;= 0) {
    // goresplosion() script
    var num_giblets = sprite_get_number(s_stab_gibs_1);
    var gib_sprite = s_stab_gibs_1;
    if (proj_pushback &gt;= gib_threshold) {
        num_giblets = sprite_get_number(s_stab_gibs_2);
        gib_sprite = s_stab_gibs_2;
    }
    for (var i = 0; i &lt; num_giblets; i++) {
        with (instance_create(x, y, o_giblet)) {
            c_skin = other.c_skin;
            sprite_index = gib_sprite;
            image_index = i;
            speed = other.proj_pushback + random_range(-3, 3);
            image_angle = other.image_angle;
            direction = image_angle - 180 + random_range(-45, 45);
            // Explode from center: (360 / num_giblets) * (i + 1);
        }
    }
    audio_play_sound_at(snd_blood_splat, x, y, 0, 0, 0, 0, false, 1);
    audio_sound_pitch(snd_blood_splat, random_range(0.8, 1));
    blood_hit(x, y, 100, blood_emitter.p_emitter, blood_emitter.p_type);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_collider">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collisions

x += 0.04 * (x - (other.x));
y += 0.04 * (y - (other.y));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Body

// Feet
draw_sprite_ext(
    s_feet, s_feet_image_index, x, y, 
    1, s_feet_image_yscale, direction, c_skin, 1
);
// Torso (shadow)
draw_sprite_shadow_ext(
    s_torso_wpn, gun_current[GUN.carry], x, y, image_angle,
    270, 5, 1, 1, c_black, 0.5
);
// Weapon (shadow)
draw_sprite_shadow_ext(
    s_guns, gun_current[GUN.sprite_frame_index],
    x + lengthdir_x(global.gun_carry_offset[gun_current[GUN.carry]], image_angle), 
    y + lengthdir_y(global.gun_carry_offset[gun_current[GUN.carry]], image_angle),
    image_angle,
    270, 5, 1, 1, c_black, 0.5
);
// Torso (sprite)
draw_sprite_ext(s_torso_wpn, gun_current[GUN.carry], x, y, 1, 1, image_angle, c_skin, 1);
// Head
draw_sprite_shadow_ext(
    s_plr_head, 0, x, y, image_angle,
    270, 3, 1, 1, c_black, 0.5,
);
draw_sprite_ext(s_plr_head, 0, x, y, 1, 1, image_angle, c_skin, 1);
// Eyes
draw_sprite_ext(s_plr_head, 1, x, y, 1, 1, image_angle, c_white, 1);
// Weapon (sprite)
draw_sprite_ext(
    s_guns, gun_current[GUN.sprite_frame_index], 
    x + lengthdir_x(global.gun_carry_offset[gun_current[GUN.carry]], image_angle), 
    y + lengthdir_y(global.gun_carry_offset[gun_current[GUN.carry]], image_angle),
    1, 1, image_angle, c_white, 1,
);

// Footprints
draw_footprints();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stats

// Weapon
draw_sprite_ext(s_guns_hud, gun_current[GUN.sprite_frame_index], x, y + 30, 1, 1, 0, c_white, 0.5);

// Health
draw_healthbar(
    x - 10, y - 20, x + 10, y - 18,
    total_health, c_gray, c_red, global.c_healthy_green, 0, true, false
);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
