<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Health
max_health = 20;// * wave_level_multiplier
hhealth = max_health;
total_health = (hhealth / max_health) * 100;

// Movement
move_speed = random_range(2, 4);
acceleration = 0.1;
mass = 10;
strafe_dir_time = 0;

// Stab stuff
can_stab = true;
stab_time = 0;
has_stabbed = false;
x_stab = x + lengthdir_x(20, image_angle);
y_stab = y + lengthdir_y(20, image_angle);
stab_p_emitter = part_emitter_create(global.p_sys);
stab_p_type = part_type_create();

// Sprite stuff
torso_y_scale = 1;
walk_wave_t = 0;
walk_wave_inc = 10;
s_feet_image_index = 0;
s_feet_image_xscale = 1;
sprite_index = s_mask_human;

// Blood
drawn_blood = true;
blood_emitter = instance_create(x, y, o_particle_emitter);

// Other
dmg_pushback = 0;
gib_threshold = 10;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cleanup

part_emitter_destroy(global.p_sys, stab_p_emitter);
part_type_destroy(stab_p_type);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// can_stab = true;

can_stab = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Blood emitter position

blood_emitter.x = x;
blood_emitter.y = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement

// Orientation
image_angle = point_direction(x, y, o_player.x, o_player.y);

var dist_to_plr = distance_to_point(o_player.x, o_player.y);
// Move towards player, while strafing, if not within effective stabbing range
if (dist_to_plr &gt; 100) {
    if (strafe_dir_time &lt;= 0) {
        strafe_dir_time = random_range(20, 40);
        direction = random_range(45, -45) + point_direction(x, y, o_player.x, o_player.y);
    }
    strafe_dir_time--;
    stab_ready = true;
    speed = lerp(speed, move_speed, acceleration);
}
else if (dist_to_plr &gt; 30 &amp;&amp; dist_to_plr &lt;= 100){
    speed = lerp(speed, move_speed, acceleration);
    move_towards_point(o_player.x, o_player.y, speed);
}
else {
    if (can_stab) {
        torso_y_scale = choose(1, -1);
        stab_time = 10;
        speed = random_range(5, 10); // stab_speed
        can_stab = false;
        has_stabbed = false;
        alarm[0] = random_range(20, 30);
    }
    speed = lerp(speed, 0, acceleration);  // remove for what a o_berserker would do
}

if (stab_time &gt; 0) {
    stab_time--;
}

// Feet
var amplitude = sprite_get_number(s_feet) - 0.9;
var wave_val = amplitude * sin(degtorad(walk_wave_t));
s_feet_image_index = abs(wave_val);
if (wave_val &lt; 0) {
    s_feet_image_xscale = -1;
}
else {
    s_feet_image_xscale = 1;
}

if (speed) {
    walk_wave_t += walk_wave_inc/4 * speed; 
}
else {
    if (abs(wave_val) &gt; 0.1) {
        if (abs(wave_val) &lt; abs(amplitude * sin(degtorad(walk_wave_t + 1)))) {
            walk_wave_t -= walk_wave_inc;
        }
        else if (abs(wave_val) &gt;= abs(amplitude * sin(degtorad(walk_wave_t + 1)))) {
            walk_wave_t += walk_wave_inc;    
        }
    }
    else {
        walk_wave_t = 0;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stab Specific

x_stab = x + lengthdir_x(20, image_angle);
y_stab = y + lengthdir_y(20, image_angle);

if (!has_stabbed &amp;&amp; collision_point(x_stab, y_stab, o_player, true, false)) {
    blood_hit(x_stab, y_stab, 20, stab_p_emitter, stab_p_type);
    shake_screen(10, 10);
    has_stabbed = true;
    drawn_blood = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Health &amp; Death

total_health = (hhealth / max_health) * 100;

if (total_health &lt;= 0) {
    var num_giblets = sprite_get_number(s_stab_gibs_1);
    var gib_sprite = s_stab_gibs_1;
    if (dmg_pushback &gt;= gib_threshold) {
        num_giblets = sprite_get_number(s_stab_gibs_2);
        gib_sprite = s_stab_gibs_2;
    }
    for (var i = 0; i &lt; num_giblets; i++) {
        with (instance_create(x, y, o_giblet)) {
            sprite_index = gib_sprite;
            image_index = i;
            speed = other.dmg_pushback + random_range(-3, 3);
            image_angle = other.image_angle;
            direction = image_angle - 180 + random_range(-45, 45);
            // Explode from center: (360 / num_giblets) * (i + 1);
        }
    }
    // Set alarm for particle emitter / type destruction (1 second)
    blood_emitter.alarm[0] = room_speed;
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_collider">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collisions

x += 0.04 * (x - (other.x));
y += 0.04 * (y - (other.y));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Body

// Feet
draw_sprite_ext(
    s_feet, s_feet_image_index, x, y, 
    s_feet_image_xscale, 1, direction, c_white, 1
);
// Torso
var torso_image_index;
if (stab_time &gt; 0) {
    torso_image_index = 1;
}
else {
    torso_image_index = 0;
}
draw_sprite_shadow_ext(
    s_stab_torso, torso_image_index, x, y, image_angle,
    270, 5, 1, torso_y_scale, c_black, 0.5
);
draw_sprite_ext(
    s_stab_torso, torso_image_index, x, y, 
    1, torso_y_scale, image_angle, c_white, 1
);
// Head
draw_sprite_shadow_ext(
    s_plr_head, 0, x, y, image_angle,
    270, 3, 1, 1, c_black, 0.5,
);
draw_sprite_ext(s_plr_head, 0, x, y, 1, 1, image_angle, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Blood (on stab)

if (!drawn_blood) {
    draw_blood(x + lengthdir_x(10, image_angle), y + lengthdir_y(10, image_angle));
    drawn_blood = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Health

var healthy_green = make_colour_hsv(90, 255, 160);// global
draw_healthbar(
    x - 10, y - 20, x + 10, y - 18,
    total_health, c_gray, c_red, healthy_green, 0, true, false
);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
