<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = room_width/2;
y = room_height/2;
sprite_index = s_mask_human;

hhealth = 9001;
mass = 10;
acceleration = 0.1;
move_speed = 5;

can_shoot = true;
shoot_delay = 6;

// Particle Emitters
muzzle_flash_p_emitter = part_emitter_create(global.p_sys);
muzzle_flash_p_type = part_type_create();
blood_emitter = instance_create(x, y, o_particle_emitter);

// Audio
audio_listener_position(x, y, 0);
audio_listener_orientation(0,1,0,0,0,1);

// Bindings
key_up = ord("W");
key_down = ord("S");
key_left = ord("A");
key_right = ord("D");
key_reload = vk_space;
mb_shoot = mb_left;

// Sprite (Body)
s_torso_current = s_torso_wpn;
s_feet_image_index = 0;
s_feet_image_yscale = 1;
walk_wave_t = 0;
drawn_footprint = false;

// Gun
gun_index = 0;
gun_inventory = ds_list_create();
ds_list_add(gun_inventory, ITEM.pistol);
ds_list_add(gun_inventory, ITEM.revolver);
ds_list_add(gun_inventory, ITEM.smg);
gun_current = global.items[ds_list_find_value(gun_inventory, gun_index)];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cleanup

blood_emitter.alarm[0] = room_speed;
part_emitter_destroy(global.p_sys, muzzle_flash_p_emitter);
part_type_destroy(muzzle_flash_p_type);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// drawn_footprint = true
drawn_footprint = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// can_shoot = true
can_shoot = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shooting

switch (gun_current[GUN.action]) {
    case GUN_ACTION.semi_auto:
        if (mouse_check_button_pressed(mb_shoot)) {
            shoot(gun_current, o_enemy);
        }
        break;
    case GUN_ACTION.automatic:
        if (mouse_check_button(mb_shoot) &amp;&amp; can_shoot) {
            shoot(gun_current, o_enemy);
            can_shoot = false;
            alarm[0] = gun_current[GUN.shoot_delay];
        }
        break;
    case GUN_ACTION.single_shot:
        if (mouse_check_button_pressed(mb_shoot) &amp;&amp; can_shoot) {
            shoot(gun_current, o_enemy);
            can_shoot = false;
            alarm[0] = gun_current[GUN.shoot_delay];
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement

// Audio
audio_listener_position(x, y, 0);

// Orientation
image_angle = point_direction(x, y, o_crosshair.x, o_crosshair.y);

// - Keyboard -
var move_up, move_down, move_left, move_right;
var set_speed;

move_up = keyboard_check(key_up);
move_down = keyboard_check(key_down);
move_left = keyboard_check(key_left);
move_right = keyboard_check(key_right);

var set_speed;
if ((move_up &amp;&amp; move_left) || (move_up &amp;&amp; move_right) || (move_down &amp;&amp; move_left) || (move_down &amp;&amp; move_right)) {
    set_speed = cos(degtorad(45)) * move_speed;
}
else {
    set_speed = move_speed;
}

// Horizontal Movement
if (move_up &amp;&amp; ! move_down) {
    vspeed = lerp(vspeed, -set_speed, acceleration);
}
else if (move_down &amp;&amp; !move_up) {
    vspeed = lerp(vspeed, set_speed, acceleration);
}
else if (!move_down &amp;&amp; !move_up) {
    vspeed = lerp(vspeed, 0, acceleration);
}
// Vertical Movement
if (move_left &amp;&amp; !move_right) {
    hspeed = lerp(hspeed, -set_speed, acceleration);
}
else if (move_right &amp;&amp; !move_left) {
    hspeed = lerp(hspeed, set_speed, acceleration);
}
else if (!move_right &amp;&amp; !move_left) {
    hspeed = lerp(hspeed, 0, acceleration);
}

handle_human_leg_anim(move_up || move_down || move_left || move_right);

// - Gamepad -
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Barrier &amp; Motherlode Collision

// Barrier
var dist = point_distance(x, y, o_motherlode.x, o_motherlode.y);
var dir = point_direction(x, y, o_motherlode.x, o_motherlode.y);
var diff = dist - global.barrier_radius;

if (diff &gt; 0) {
    x += lengthdir_x(diff, dir);
    y += lengthdir_y(diff, dir);
}

// Motherlode
diff = dist - o_motherlode.radius;

if (diff &lt; 0) {
    x += lengthdir_x(diff, dir);
    y += lengthdir_y(diff, dir);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Weapon Swap

if (mouse_wheel_up() &amp;&amp; gun_index &lt; ds_list_size(gun_inventory) - 1) {
    gun_index++;
    gun_current = global.items[ds_list_find_value(gun_inventory, gun_index)];
}
if (mouse_wheel_down() &amp;&amp; gun_index &gt; 0) {
    gun_index--;
    gun_current = global.items[ds_list_find_value(gun_inventory, gun_index)];
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="o_collider">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision checking

//Set up vars
var dir, xoff, yoff, om, mm, mag;

dir = point_direction(x, y, other.x, other.y);    //Get the direction from the colliding object
xoff = lengthdir_x(1, dir);                       //Get the offset vector
yoff = lengthdir_y(1, dir);
om = other.mass / mass;                         //start the fake "physics mass" calculations
mm = mass / other.mass;
mag = sqrt((om * om) + (mm * mm));
om /= mag;
mm /= mag;

//Move out of collision
while (place_meeting(x, y, other)) {
    x -= xoff * om; //Move the instance out of collision
    y -= yoff * om;
    other.x += xoff * mm; //Move the other instance out of the collision
    other.y += yoff * mm;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Body &amp; Weapon

// Feet
draw_sprite_ext(
    s_feet, s_feet_image_index, x, y, 
    1, s_feet_image_yscale, direction, c_white, 1
);
// Torso (shadow)
draw_sprite_shadow_ext(
    s_torso_current, gun_current[GUN.carry], x, y, image_angle,
    270, 5, 1, 1, c_black, 0.5
);
// Weapon (shadow)
draw_sprite_shadow_ext(
    s_w_primary, gun_current[GUN.sprite_frame_index],
    x + lengthdir_x(global.gun_carry_offset[gun_current[GUN.carry]], image_angle), 
    y + lengthdir_y(global.gun_carry_offset[gun_current[GUN.carry]], image_angle),
    image_angle,
    270, 5, 1, 1, c_black, 0.5
);
// Torso (sprite)
draw_sprite_ext(s_torso_current, gun_current[GUN.carry], x, y, 1, 1, image_angle, c_white, 1);
// Head
draw_sprite_shadow_ext(
    s_plr_head, 0, x, y, image_angle,
    270, 3, 1, 1, c_black, 0.5,
);
draw_sprite_ext(s_plr_head, 0, x, y, 1, 1, image_angle, c_white, 1);
// Weapon (sprite)
draw_sprite_ext(
    s_w_primary, gun_current[GUN.sprite_frame_index], 
    x + lengthdir_x(global.gun_carry_offset[gun_current[GUN.carry]], image_angle), 
    y + lengthdir_y(global.gun_carry_offset[gun_current[GUN.carry]], image_angle),
    1, 1, image_angle, c_white, 1,
);

// Footprints
draw_footprints();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Line Of Sight

var max_len = 200;
var min_len = 100;
var len = point_distance(x, y, o_crosshair.x, o_crosshair.y) * max_len / (room_width/4);
if (len &lt; min_len) {
    len = min_len;
}
if (len &gt; max_len) {
    len = max_len;
}

draw_set_colour(c_white);
draw_set_alpha(0.3);
draw_line_width(
    x + lengthdir_x(50, image_angle),
    y + lengthdir_y(50, image_angle),
    x + lengthdir_x(len, image_angle), 
    y + lengthdir_y(len, image_angle),
    2
);
draw_set_alpha(1);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Instance count

draw_text(x, y + 30, instance_count);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
