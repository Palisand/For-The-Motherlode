<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// General

global.p_sys = part_system_create();
global.surf_edge_buffer = 50;
global.surf_offset = global.surf_edge_buffer / 2;
global.surf = surface_create(room_width + global.surf_edge_buffer, room_height + global.surf_edge_buffer);
global.barrier_radius = room_width/2 - 100;

global.c_healthy_green = make_colour_hsv(90, 255, 160);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Item IDs &amp; Attributes

enum ITEM {
    // Consumables
    tonic,  // health restoration
    concentrated_tonic,  // greater health restoration
    turbo_tonic,  // faster health restoration
    concentrated_turbo_tonic,
    bandages,  // stop bleed-out (no poison in game, so essentially antivenin)
    adrenaline,  // speed movement increase and single-shot shoot delay decrease (blur on movement)
    peripherine, // increased peripheral vision
    jesus_juice,  // damage resistance increase
    yams, // damage increase (the power that be)
    slo_mo, // slow motion (slo-mo, what an original name)
    deadeye, // decreased weapon spread (radial blur)
    // Guns
    pistol,
    revolver,
    smg,
    lmg,
    pump_shotgun,
    s_o_shotgun,
    auto_shotgun,
    rifle,  // single shot
    battle_rifle,  // semi-auto
    assault_rifle,  // auto
    minigun,
    grenade_launcher,
    sa_grenade_launcher,
    auto_grenade_launcher,
    missile_launcher,
};

enum ITEM_ATTR {
    type,
    enum_size
};

enum ITEM_TYPE {
    gun,
    consumables,
    trap,  // includes mines, turrets, etc.
    craft  // scrap metal, adhesive, etc.
};
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gun Attributes

enum GUN {
    name = 1, // ITEM_ATTR.enum_size,
    description,
    action,
    carry,
    damage,
    range,
    spread,
    proj_speed,
    proj_amount,
    proj_force,
    proj_type,
    ammo_type,  // determines casing
    shoot_delay,
    sprite_frame_index,
    muzzle_offset,  // pixel distance from sprite center to weapon muzzle
    sound_fire,
    sound_equip
};

enum GUN_CARRY {  // corresonds to sprite frame indices for 's_torso_wpn'
    single,
    double,
    shoulder,
    hip
};

enum GUN_ACTION {
    semi_auto, // as fast as you click (no shoot delay)
    automatic,
    single_shot // shoot delay
};

enum GUN_AMMO {
    small_round,
    heavy_round,
    shell,
    grenade,
    missile
};

// pixel distance from torso sprite center to weapon sprite center
global.gun_carry_offset[GUN_CARRY.single] = 17;
global.gun_carry_offset[GUN_CARRY.double] = 14;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Guns

// Pistol
arr_pistol[ITEM_ATTR.type] = ITEM_TYPE.gun;
arr_pistol[GUN.name] = "Pathetic Pistol";
arr_pistol[GUN.description] = "A pathetic pistol for a pathetic player... at least it has infinite ammo."
arr_pistol[GUN.action] = GUN_ACTION.semi_auto;
arr_pistol[GUN.carry] = GUN_CARRY.single;
arr_pistol[GUN.damage] = 5;
arr_pistol[GUN.range] = 600;
arr_pistol[GUN.spread] = 3;
arr_pistol[GUN.proj_speed] = 80;
arr_pistol[GUN.proj_amount] = 1;
arr_pistol[GUN.proj_force] = 5;
arr_pistol[GUN.proj_type] = o_bullet;
arr_pistol[GUN.ammo_type] = GUN_AMMO.small_round;
arr_pistol[GUN.shoot_delay] = 0;
arr_pistol[GUN.sprite_frame_index] = 0;
arr_pistol[GUN.muzzle_offset] = 8;
arr_pistol[GUN.sound_fire] = snd_pistol_fire;
//arr_pistol[GUN.sound_equip] = 
global.items[ITEM.pistol] = arr_pistol;
// Revolver
arr_revolver[ITEM_ATTR.type] = ITEM_TYPE.gun;
arr_revolver[GUN.name] = "Revolver";
arr_revolver[GUN.description] = "Like them cowboys had."
arr_revolver[GUN.action] = GUN_ACTION.single_shot;  // just for testing (should be semi-auto, with 0 shoot_delay)
arr_revolver[GUN.carry] = GUN_CARRY.single;
arr_revolver[GUN.damage] = 12;
arr_revolver[GUN.range] = 1000;
arr_revolver[GUN.spread] = 4;
arr_revolver[GUN.proj_speed] = 80;
arr_revolver[GUN.proj_amount] = 1;
arr_revolver[GUN.proj_force] = 10;
arr_revolver[GUN.proj_type] = o_bullet;
arr_revolver[GUN.ammo_type] = GUN_AMMO.small_round;
arr_revolver[GUN.shoot_delay] = 60;
arr_revolver[GUN.sprite_frame_index] = 1;
arr_revolver[GUN.muzzle_offset] = 10;
arr_revolver[GUN.sound_fire] = snd_pistol_fire;
//arr_revolver[GUN.sound_equip] = 
global.items[ITEM.revolver] = arr_revolver;
// SMG
arr_smg[ITEM_ATTR.type] = ITEM_TYPE.gun;
arr_smg[GUN.name] = "Submachine Gun";
arr_smg[GUN.description] = "Also goes by spray n' pray."
arr_smg[GUN.action] = GUN_ACTION.automatic;
arr_smg[GUN.carry] = GUN_CARRY.single;
arr_smg[GUN.damage] = 4;
arr_smg[GUN.range] = 500;
arr_smg[GUN.spread] = 10;
arr_smg[GUN.proj_speed] = 80;
arr_smg[GUN.proj_amount] = 1;
arr_smg[GUN.proj_force] = 5;
arr_smg[GUN.proj_type] = o_bullet;
arr_smg[GUN.ammo_type] = GUN_AMMO.small_round;
arr_smg[GUN.shoot_delay] = 5;
arr_smg[GUN.sprite_frame_index] = 2;
arr_smg[GUN.muzzle_offset] = 12;
arr_smg[GUN.sound_fire] = snd_pistol_fire;
//arr_smg[GUN.sound_equip] = 
global.items[ITEM.smg] = arr_smg;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
