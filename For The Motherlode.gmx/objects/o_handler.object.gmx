<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();

instance_create(0, 0, o_globals);
instance_create(0, 0, o_player);
instance_create(mouse_x, mouse_y, o_crosshair);
instance_create(0, 0, o_camera);
instance_create(room_width/2, room_height/2, o_motherlode);

//instance_create(room_width/2, room_height/2, o_enemy);

repeat(10)
    instance_create(random(room_width), random(room_height), o_stabber);


// Terrain
/*
var edge_buffer = 50; // will probably need this for global.surf too

surf_noise = huder_SmoothNoise(room_width + edge_buffer * 2, 4, 1, 1);
s_terrain_1 = sprite_create_from_surface(surf_noise, 0, 0, room_width + (edge_buffer * 2), room_height + (edge_buffer * 2), false, false, edge_buffer, edge_buffer);
//sprite_save(s_terrain_1, 0, working_directory + "s_terrain_1.png");
surf_noise = huder_SmoothNoise(room_width + edge_buffer * 2, 8, 1, 1);
s_terrain_2 = sprite_create_from_surface(surf_noise, 0, 0, room_width + (edge_buffer * 2), room_height + (edge_buffer * 2), false, false, edge_buffer, edge_buffer);
//sprite_save(s_terrain_1, 0, working_directory + "s_terrain_2.png");
texture_set_interpolation(true);
surf_noise = huder_SmoothNoise(room_width + (edge_buffer * 2), 8, 2, 3);
s_smooth_noise = sprite_create_from_surface(surf_noise, 0, 0, room_width + (edge_buffer * 2), room_height + (edge_buffer * 2), false, false, edge_buffer, edge_buffer);
texture_set_interpolation(false);
surface_free(surf_noise);
sprite_set_alpha_from_sprite(s_terrain_2, s_smooth_noise);
*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// End, Restart, Fullscreen

if (keyboard_check_pressed(vk_escape)) {
    game_end();
}

if (keyboard_check_pressed(ord("R"))) {
    game_restart();
}

if (keyboard_check_pressed(ord("F"))) {
    window_set_fullscreen(!window_get_fullscreen());
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Noise
/*
if (keyboard_check(ord("1"))) {
    if (mouse_wheel_up()) {
        octaves++;
    }
    if (mouse_wheel_down()) {
        octaves--;
    }
}
if (keyboard_check(ord("2"))) {
    if (mouse_wheel_up()) {
        scale++;
    }
    if (mouse_wheel_down()) {
        scale--;
    }
}
if (keyboard_check(ord("3"))) {
    if (mouse_wheel_up()) {
        persistence++;
    }
    if (mouse_wheel_down()) {
        persistence--;
    }
}

if (keyboard_check_pressed(vk_enter)) {
    surf_noise = huder_SmoothNoise(room_width, octaves, scale, persistence);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// FPS
draw_text(0, 0, fps);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Noise
/*
draw_text(0, 20, "octaves: " + string(octaves));
draw_text(0, 40, "scale: " + string(scale));
draw_text(0, 60, "persistence: " + string(persistence));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Terrain
/*
var c_terrain_beige = make_colour_hsv(30, 150, 200);
var c_terrain_brown = make_colour_hsv(20, 150, 200);
draw_sprite_ext(s_terrain_1, 0, 0, 0, 1, 1, 0, c_terrain_beige, 1);
draw_sprite_ext(s_terrain_2, 0, 0, 0, 1, 1, 0, c_terrain_brown, 1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Surface

draw_surface(global.surf, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Grid &amp; Barrier

/*
for (var i = 0; i &lt; room_width; i += room_width / 5) {
    draw_line(i, 0, i, room_height);
    draw_line(0, i, room_width, i);
}

/*
draw_set_circle_precision(64);
draw_circle(room_width/2, room_height/2, global.barrier_radius, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
